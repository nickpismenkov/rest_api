const express = require('express')
const config = require('./config')
const { Pool, Client } = require('pg')

const app = express()

const startQuery = `CREATE TABLE IF NOT EXISTS public.tasks(id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, title TEXT NOT NULL, priority INTEGER NOT NULL)`

const pool = new Pool({
    user: config.Database.user,
    host: config.Database.host,
    database: config.Database.db_name,
    password: config.Database.password,
    port: config.Database.port
})
pool.query(startQuery, (err, res) => {
    console.log(err, res)
    pool.end()
})

app.put('/api/add/:title/:priority', (req, res) => {
    var title = req.params.title
    var priority = req.params.priority

    if((title.length >= 1 && title.length <= 255) && (priority >= 0 && priority <= 100 && priority ^ 0 == priority)){
        var queryString = `INSERT INTO ${config.Database.tb_name} (title, priority) VALUES ('${title}', ${priority})`
        
        const pool = new Pool({
            user: config.Database.user,
            host: config.Database.host,
            database: config.Database.db_name,
            password: config.Database.password,
            port: config.Database.port
        })
        pool.query(queryString, (err, res) => {
            console.log(err, res)
            pool.end()
        })

        res.send('Record was added')
    } else {
        res.send('Data does not fit')
    }
})

app.delete('/api/del/:id', (req, res) => {
    var id = req.params.id

    if(id >= 1 && id ^ 0 == id){
        var queryString = `DELETE FROM ${config.Database.tb_name} WHERE id = ${id}`
        
        const pool = new Pool({
            user: config.Database.user,
            host: config.Database.host,
            database: config.Database.db_name,
            password: config.Database.password,
            port: config.Database.port
        })
        pool.query(queryString, (err, res) => {
            console.log(err, res)
            pool.end()
        })

        res.send('Record was deleted')
    } else {
        res.send('Data does not fit')
    }
})

app.get('/api/max', (req, res) => {
    var queryString = `SELECT * FROM ${config.Database.tb_name} WHERE priority = (SELECT max(priority) FROM ${config.Database.tb_name})`
        
    const pool = new Pool({
        user: config.Database.user,
        host: config.Database.host,
        database: config.Database.db_name,
        password: config.Database.password,
        port: config.Database.port
    })
    pool.query(queryString, (err, response) => {
        if(response.rows.length > 0){
            res.json(response.rows[0])
        } else {
            res.send('Empty table')
        }
        console.log(err, response)
        pool.end()
    })
})

app.listen(config.Server.PORT, () => {
    console.log(`Server running on port - ${config.Server.PORT}...`)
})